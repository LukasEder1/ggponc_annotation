from util.convert_annotations import read_webanno, webanno_to_iob_df
from pathlib import Path

base_path = Path('test') / 'test_files'

#Text=Die Prognose retroperitonealer EGKZT ist besser und ähnelt der der metastasierten gonadalen KZT.

def test_simple_value_short():
    webanno_df, _ = read_webanno([base_path / 'test_simple.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output

    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Finding'
    assert conll[2]  == 'O'
    assert conll[3]  == 'B-Finding'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'O'
    assert conll[12] == 'B-Finding'
    assert conll[13] == 'O'

def test_simple_value_long():
    webanno_df, _ = read_webanno([base_path / 'test_simple.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=True).output

    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Finding'
    assert conll[2]  == 'I-Finding'
    assert conll[3]  == 'I-Finding'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'B-Finding'
    assert conll[11] == 'I-Finding'
    assert conll[12] == 'I-Finding'
    assert conll[13] == 'O'

def test_simple_detail_short():
    webanno_df, _ = read_webanno([base_path / 'test_simple.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=False).output

    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Other_Finding'
    assert conll[2]  == 'O'
    assert conll[3]  == 'B-Diagnosis_or_Pathology'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'O'
    assert conll[12] == 'B-Diagnosis_or_Pathology'
    assert conll[13] == 'O'

def test_simple_detail_long():
    webanno_df, _ = read_webanno([base_path / 'test_simple.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=True).output

    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Other_Finding'
    assert conll[2]  == 'I-Other_Finding'
    assert conll[3]  == 'I-Other_Finding'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'B-Diagnosis_or_Pathology'
    assert conll[11] == 'I-Diagnosis_or_Pathology'
    assert conll[12] == 'I-Diagnosis_or_Pathology'
    assert conll[13] == 'O'

#Text=Vor und unter Immuntherapien mit anti-CTLA4 und anti-PD1 Antikörper sollte die CK regelmässig bestimmt werden, sowie immer bei Auftreten kardialer Symptome.

def test_gap_value_short():
    webanno_df, _ = read_webanno([base_path / 'test_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output

    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'B-Procedure'
    assert conll[4]  == 'O'
    assert conll[5]  == 'B-Substance'
    assert conll[6]  == 'O'
    assert conll[7]  == 'B-Substance'
    assert conll[8]  == 'I-Substance'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Substance'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'B-Finding'
    assert conll[20] == 'O'
    assert conll[21] == 'B-Finding'
    assert conll[22] == 'O'

def test_gap_detail_short():
    webanno_df, _ = read_webanno([base_path / 'test_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=False).output

    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'B-Therapeutic'
    assert conll[4]  == 'O'
    assert conll[5]  == 'B-Clinical_Drug'
    assert conll[6]  == 'O'
    assert conll[7]  == 'B-Clinical_Drug'
    assert conll[8]  == 'I-Clinical_Drug'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Nutrient_or_Body_Substance'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'B-Diagnosis_or_Pathology'
    assert conll[20] == 'O'
    assert conll[21] == 'B-Diagnosis_or_Pathology'
    assert conll[22] == 'O'

def test_gap_value_long():
    webanno_df, _ = read_webanno([base_path / 'test_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=True).output

    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'B-Procedure'
    assert conll[4]  == 'I-Procedure'
    assert conll[5]  == 'I-Procedure'
    assert conll[6]  == 'I-Procedure'
    assert conll[7]  == 'I-Procedure'
    assert conll[8]  == 'I-Procedure'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Substance'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'B-Finding'
    assert conll[20] == 'I-Finding'
    assert conll[21] == 'I-Finding'
    assert conll[22] == 'O'

def test_gap_detail_long():
    webanno_df, _ = read_webanno([base_path / 'test_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=True).output

    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'B-Therapeutic'
    assert conll[4]  == 'I-Therapeutic'
    assert conll[5]  == 'I-Therapeutic'
    assert conll[6]  == 'I-Therapeutic'
    assert conll[7]  == 'I-Therapeutic'
    assert conll[8]  == 'I-Therapeutic'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Nutrient_or_Body_Substance'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'B-Diagnosis_or_Pathology'
    assert conll[20] == 'I-Diagnosis_or_Pathology'
    assert conll[21] == 'I-Diagnosis_or_Pathology'
    assert conll[22] == 'O'


#Text=Bei oraler und enteraler Ernährung gelten für die Zufuhr von Mikronährstoffen die DACH-Empfehlungen [REF].

def test_multispec_value_short():
    webanno_df, _ = read_webanno([base_path / 'test_multi_spec.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'B-Procedure'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'B-Procedure'
    assert conll[9]  == 'O'
    assert conll[10] == 'B-Substance'
    assert conll[11] == 'O'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'

def test_multispec_value_long():
    webanno_df, _ = read_webanno([base_path / 'test_multi_spec.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=True).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Procedure'
    assert conll[2]  == 'I-Procedure'
    assert conll[3]  == 'I-Procedure'
    assert conll[4]  == 'I-Procedure'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'B-Procedure'
    assert conll[9]  == 'I-Procedure'
    assert conll[10] == 'I-Procedure'
    assert conll[11] == 'O'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'

def test_multispec_detail_short():
    webanno_df, _ = read_webanno([base_path / 'test_multi_spec.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'B-Therapeutic'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'B-Therapeutic'
    assert conll[9]  == 'O'
    assert conll[10] == 'B-Nutrient_or_Body_Substance'
    assert conll[11] == 'O'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'

def test_multispec_detail_long():
    webanno_df, _ = read_webanno([base_path / 'test_multi_spec.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=True).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Therapeutic'
    assert conll[2]  == 'I-Therapeutic'
    assert conll[3]  == 'I-Therapeutic'
    assert conll[4]  == 'I-Therapeutic'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'B-Therapeutic'
    assert conll[9]  == 'I-Therapeutic'
    assert conll[10] == 'I-Therapeutic'
    assert conll[11] == 'O'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'

#Text=Insbesondere Antioxidantien können die Wirkung von Chemo- und Strahlentherapie abschwächen.

def test_fragment_value_short():
    webanno_df, _ = read_webanno([base_path / 'test_fragment.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Substance'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'B-Procedure'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'B-Procedure'
    assert conll[10] == 'O'
    assert conll[11] == 'O'

def test_fragment_value_long():
    webanno_df, _ = read_webanno([base_path / 'test_fragment.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=True).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Substance'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'B-Procedure'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'B-Procedure'
    assert conll[10] == 'O'
    assert conll[11] == 'O'

def test_fragment_detail_short():
    webanno_df, _ = read_webanno([base_path / 'test_fragment.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Nutrient_or_Body_Substance'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'B-Therapeutic'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'B-Therapeutic'
    assert conll[10] == 'O'
    assert conll[11] == 'O'

def test_fragment_detail_long():
    webanno_df, _ = read_webanno([base_path / 'test_fragment.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=True).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Nutrient_or_Body_Substance'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'B-Therapeutic'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'B-Therapeutic'
    assert conll[10] == 'O'
    assert conll[11] == 'O'

#Text=Vitamin E wurde prophylaktisch zum Schutz vor der Entwicklung der Neurotoxizität unter Cisplatin und Taxol eingesetzt.

def test_multi_spec_gap_value_short():
    webanno_df, _ = read_webanno([base_path / 'test_multi_spec_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output
    assert conll[0]  == 'B-Substance'
    assert conll[1]  == 'I-Substance'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'B-Finding'
    assert conll[11] == 'O'
    assert conll[12] == 'B-Substance'
    assert conll[13] == 'O'
    assert conll[14] == 'B-Substance'
    assert conll[15] == 'O'
    assert conll[16] == 'O'

def test_multi_spec_gap_value_long():
    webanno_df, _ = read_webanno([base_path / 'test_multi_spec_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=True).output
    assert conll[0]  == 'B-Substance'
    assert conll[1]  == 'I-Substance'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'B-Finding'
    assert conll[11] == 'I-Finding'
    assert conll[12] == 'I-Finding'
    assert conll[13] == 'I-Finding'
    assert conll[14] == 'I-Finding'
    assert conll[15] == 'O'
    assert conll[16] == 'O'

def test_multi_spec_gap_detail_short():
    webanno_df, _ = read_webanno([base_path / 'test_multi_spec_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=False).output
    assert conll[0]  == 'B-Nutrient_or_Body_Substance'
    assert conll[1]  == 'I-Nutrient_or_Body_Substance'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'B-Diagnosis_or_Pathology'
    assert conll[11] == 'O'
    assert conll[12] == 'B-Clinical_Drug'
    assert conll[13] == 'O'
    assert conll[14] == 'B-Clinical_Drug'
    assert conll[15] == 'O'
    assert conll[16] == 'O'

def test_multi_spec_gap_detail_long():
    webanno_df, _ = read_webanno([base_path / 'test_multi_spec_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=True).output
    assert conll[0]  == 'B-Nutrient_or_Body_Substance'
    assert conll[1]  == 'I-Nutrient_or_Body_Substance'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'B-Diagnosis_or_Pathology'
    assert conll[11] == 'I-Diagnosis_or_Pathology'
    assert conll[12] == 'I-Diagnosis_or_Pathology'
    assert conll[13] == 'I-Diagnosis_or_Pathology'
    assert conll[14] == 'I-Diagnosis_or_Pathology'
    assert conll[15] == 'O'
    assert conll[16] == 'O'

#Text=Bei einer durch kolposkopisch gezielte Biopsie gesicherten CIN 1 beträgt das Risiko der Entwicklung einer CIN 2/3 innerhalb den nächsten 2 Jahren nur 13% [REF].

def test_specification_fragment_value_short():
    webanno_df, _ = read_webanno([base_path / 'test_specification_fragment.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'B-Procedure'
    assert conll[6]  == 'O'
    assert conll[7]  == 'B-Finding'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Finding'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'B-Finding'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'O'
    assert conll[22] == 'O'
    assert conll[23] == 'O'
    assert conll[24] == 'O'
    assert conll[25] == 'O'
    assert conll[26] == 'O'
    assert conll[27] == 'O'
    assert conll[28] == 'O'
    assert conll[29] == 'O'

def test_specification_fragment_value_long():
    webanno_df, _ = read_webanno([base_path / 'test_specification_fragment.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=True).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'B-Finding'
    assert conll[4]  == 'I-Finding'
    assert conll[5]  == 'I-Finding'
    assert conll[6]  == 'I-Finding'
    assert conll[7]  == 'I-Finding'
    assert conll[8]  == 'I-Finding'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Finding'
    assert conll[12] == 'I-Finding'
    assert conll[13] == 'I-Finding'
    assert conll[14] == 'I-Finding'
    assert conll[15] == 'I-Finding'
    assert conll[16] == 'I-Finding'
    assert conll[17] == 'I-Finding'
    assert conll[18] == 'I-Finding'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'O'
    assert conll[22] == 'O'
    assert conll[23] == 'O'
    assert conll[24] == 'O'
    assert conll[25] == 'O'
    assert conll[26] == 'O'
    assert conll[27] == 'O'
    assert conll[28] == 'O'
    assert conll[29] == 'O'    

def test_specification_fragment_detail_short():
    webanno_df, _ = read_webanno([base_path / 'test_specification_fragment.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'B-Diagnostic'
    assert conll[6]  == 'O'
    assert conll[7]  == 'B-Diagnosis_or_Pathology'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Other_Finding'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'B-Diagnosis_or_Pathology'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'O'
    assert conll[22] == 'O'
    assert conll[23] == 'O'
    assert conll[24] == 'O'
    assert conll[25] == 'O'
    assert conll[26] == 'O'
    assert conll[27] == 'O'
    assert conll[28] == 'O'
    assert conll[29] == 'O'

def test_specification_fragment_detail_long():
    webanno_df, _ = read_webanno([base_path / 'test_specification_fragment.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=True).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'B-Diagnosis_or_Pathology'
    assert conll[4]  == 'I-Diagnosis_or_Pathology'
    assert conll[5]  == 'I-Diagnosis_or_Pathology'
    assert conll[6]  == 'I-Diagnosis_or_Pathology'
    assert conll[7]  == 'I-Diagnosis_or_Pathology'
    assert conll[8]  == 'I-Diagnosis_or_Pathology'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Other_Finding'
    assert conll[12] == 'I-Other_Finding'
    assert conll[13] == 'I-Other_Finding'
    assert conll[14] == 'I-Other_Finding'
    assert conll[15] == 'I-Other_Finding'
    assert conll[16] == 'I-Other_Finding'
    assert conll[17] == 'I-Other_Finding'
    assert conll[18] == 'I-Other_Finding'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'O'
    assert conll[22] == 'O'
    assert conll[23] == 'O'
    assert conll[24] == 'O'
    assert conll[25] == 'O'
    assert conll[26] == 'O'
    assert conll[27] == 'O'
    assert conll[28] == 'O'
    assert conll[29] == 'O'    

#Text=In die „RAPID“-Studie des britischen „National Cancer Research Institute“(NCRI) wurden Patienten im Stadium IA/IIA eines klassischen Hodgkin Lymphoms (bei Diagnosestellung lag bei ca. 70% der Patienten nach der GHSG-Risikostratifizierung ein frühes Stadium vor) bei Vorliegen eines negativen PET/CTs nach drei Zyklen ABVD entweder in einen Nachbeobachtungsarm oder in einen Therapiearm mit konsolidierender Strahlentherapie mit 30 Gy IF-RT randomisiert.

def test_multi_branches_value_short():
    webanno_df, _ = read_webanno([base_path / 'test_multi_branches.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Finding'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'B-Finding'
    assert conll[22] == 'I-Finding'
    assert conll[23] == 'O'
    assert conll[24] == 'B-Finding'
    assert conll[25] == 'O'
    assert conll[26] == 'O'
    assert conll[27] == 'B-Finding'
    assert conll[28] == 'I-Finding'
    assert conll[29] == 'O'
    assert conll[30] == 'O'
    assert conll[31] == 'B-Procedure'
    assert conll[32] == 'O'
    assert conll[33] == 'O'
    assert conll[34] == 'O'
    assert conll[35] == 'O'
    assert conll[36] == 'O'
    assert conll[37] == 'O'
    assert conll[38] == 'O'
    assert conll[39] == 'O'
    assert conll[40] == 'O'
    assert conll[41] == 'B-Procedure'
    assert conll[42] == 'O'
    assert conll[43] == 'O'
    assert conll[44] == 'B-Finding'
    assert conll[45] == 'O'
    assert conll[46] == 'O'
    assert conll[47] == 'O'
    assert conll[48] == 'B-Finding'
    assert conll[49] == 'O'
    assert conll[50] == 'O'
    assert conll[51] == 'B-Finding'
    assert conll[52] == 'I-Finding'
    assert conll[53] == 'I-Finding'
    assert conll[54] == 'O'
    assert conll[55] == 'O'
    assert conll[56] == 'O'
    assert conll[57] == 'B-Procedure'
    assert conll[58] == 'O'
    assert conll[59] == 'O'
    assert conll[60] == 'O'
    assert conll[61] == 'O'
    assert conll[62] == 'O'
    assert conll[63] == 'O'
    assert conll[64] == 'O'
    assert conll[65] == 'B-Procedure'
    assert conll[66] == 'O'
    assert conll[67] == 'O'
    assert conll[68] == 'B-Procedure'
    assert conll[69] == 'O'
    assert conll[70] == 'O'
    assert conll[71] == 'O'
    assert conll[72] == 'B-Procedure'
    assert conll[73] == 'O'
    assert conll[74] == 'O'

def test_multi_branches_value_long():
    webanno_df, _ = read_webanno([base_path / 'test_multi_branches.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=True).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Finding'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'B-Finding'
    assert conll[22] == 'I-Finding'
    assert conll[23] == 'I-Finding'
    assert conll[24] == 'I-Finding'
    assert conll[25] == 'I-Finding'
    assert conll[26] == 'I-Finding'
    assert conll[27] == 'I-Finding'
    assert conll[28] == 'I-Finding'
    assert conll[29] == 'O'
    assert conll[30] == 'O'
    assert conll[31] == 'B-Procedure'
    assert conll[32] == 'O'
    assert conll[33] == 'O'
    assert conll[34] == 'O'
    assert conll[35] == 'O'
    assert conll[36] == 'O'
    assert conll[37] == 'O'
    assert conll[38] == 'O'
    assert conll[39] == 'O'
    assert conll[40] == 'O'
    assert conll[41] == 'B-Procedure'
    assert conll[42] == 'O'
    assert conll[43] == 'B-Finding'
    assert conll[44] == 'I-Finding'
    assert conll[45] == 'O'
    assert conll[46] == 'O'
    assert conll[47] == 'O'
    assert conll[48] == 'B-Finding'
    assert conll[49] == 'I-Finding'
    assert conll[50] == 'I-Finding'
    assert conll[51] == 'I-Finding'
    assert conll[52] == 'I-Finding'
    assert conll[53] == 'I-Finding'
    assert conll[54] == 'I-Finding'
    assert conll[55] == 'I-Finding'
    assert conll[56] == 'I-Finding'
    assert conll[57] == 'I-Finding'
    assert conll[58] == 'O'
    assert conll[59] == 'O'
    assert conll[60] == 'O'
    assert conll[61] == 'O'
    assert conll[62] == 'O'
    assert conll[63] == 'O'
    assert conll[64] == 'O'
    assert conll[65] == 'B-Procedure'
    assert conll[66] == 'O'
    assert conll[67] == 'B-Procedure'
    assert conll[68] == 'I-Procedure'
    assert conll[69] == 'I-Procedure'
    assert conll[70] == 'I-Procedure'
    assert conll[71] == 'I-Procedure'
    assert conll[72] == 'I-Procedure'
    assert conll[73] == 'O'
    assert conll[74] == 'O'

def test_multi_branches_detail_short():
    webanno_df, _ = read_webanno([base_path / 'test_multi_branches.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Diagnosis_or_Pathology'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'B-Diagnosis_or_Pathology'
    assert conll[22] == 'I-Diagnosis_or_Pathology'
    assert conll[23] == 'O'
    assert conll[24] == 'B-Diagnosis_or_Pathology'
    assert conll[25] == 'O'
    assert conll[26] == 'O'
    assert conll[27] == 'B-Diagnosis_or_Pathology'
    assert conll[28] == 'I-Diagnosis_or_Pathology'
    assert conll[29] == 'O'
    assert conll[30] == 'O'
    assert conll[31] == 'B-Diagnostic'
    assert conll[32] == 'O'
    assert conll[33] == 'O'
    assert conll[34] == 'O'
    assert conll[35] == 'O'
    assert conll[36] == 'O'
    assert conll[37] == 'O'
    assert conll[38] == 'O'
    assert conll[39] == 'O'
    assert conll[40] == 'O'
    assert conll[41] == 'B-Diagnostic'
    assert conll[42] == 'O'
    assert conll[43] == 'O'
    assert conll[44] == 'B-Diagnosis_or_Pathology'
    assert conll[45] == 'O'
    assert conll[46] == 'O'
    assert conll[47] == 'O'
    assert conll[48] == 'B-Other_Finding'
    assert conll[49] == 'O'
    assert conll[50] == 'O'
    assert conll[51] == 'B-Other_Finding'
    assert conll[52] == 'I-Other_Finding'
    assert conll[53] == 'I-Other_Finding'
    assert conll[54] == 'O'
    assert conll[55] == 'O'
    assert conll[56] == 'O'
    assert conll[57] == 'B-Therapeutic'
    assert conll[58] == 'O'
    assert conll[59] == 'O'
    assert conll[60] == 'O'
    assert conll[61] == 'O'
    assert conll[62] == 'O'
    assert conll[63] == 'O'
    assert conll[64] == 'O'
    assert conll[65] == 'B-Therapeutic'
    assert conll[66] == 'O'
    assert conll[67] == 'O'
    assert conll[68] == 'B-Therapeutic'
    assert conll[69] == 'O'
    assert conll[70] == 'O'
    assert conll[71] == 'O'
    assert conll[72] == 'B-Therapeutic'
    assert conll[73] == 'O'
    assert conll[74] == 'O'

def test_multi_branches_detail_long():
    webanno_df, _ = read_webanno([base_path / 'test_multi_branches.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=True).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Diagnosis_or_Pathology'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'B-Diagnosis_or_Pathology'
    assert conll[22] == 'I-Diagnosis_or_Pathology'
    assert conll[23] == 'I-Diagnosis_or_Pathology'
    assert conll[24] == 'I-Diagnosis_or_Pathology'
    assert conll[25] == 'I-Diagnosis_or_Pathology'
    assert conll[26] == 'I-Diagnosis_or_Pathology'
    assert conll[27] == 'I-Diagnosis_or_Pathology'
    assert conll[28] == 'I-Diagnosis_or_Pathology'
    assert conll[29] == 'O'
    assert conll[30] == 'O'
    assert conll[31] == 'B-Diagnostic'
    assert conll[32] == 'O'
    assert conll[33] == 'O'
    assert conll[34] == 'O'
    assert conll[35] == 'O'
    assert conll[36] == 'O'
    assert conll[37] == 'O'
    assert conll[38] == 'O'
    assert conll[39] == 'O'
    assert conll[40] == 'O'
    assert conll[41] == 'B-Diagnostic'
    assert conll[42] == 'O'
    assert conll[43] == 'B-Diagnosis_or_Pathology'
    assert conll[44] == 'I-Diagnosis_or_Pathology'
    assert conll[45] == 'O'
    assert conll[46] == 'O'
    assert conll[47] == 'O'
    assert conll[48] == 'B-Other_Finding'
    assert conll[49] == 'I-Other_Finding'
    assert conll[50] == 'I-Other_Finding'
    assert conll[51] == 'I-Other_Finding'
    assert conll[52] == 'I-Other_Finding'
    assert conll[53] == 'I-Other_Finding'
    assert conll[54] == 'I-Other_Finding'
    assert conll[55] == 'I-Other_Finding'
    assert conll[56] == 'I-Other_Finding'
    assert conll[57] == 'I-Other_Finding'
    assert conll[58] == 'O'
    assert conll[59] == 'O'
    assert conll[60] == 'O'
    assert conll[61] == 'O'
    assert conll[62] == 'O'
    assert conll[63] == 'O'
    assert conll[64] == 'O'
    assert conll[65] == 'B-Therapeutic'
    assert conll[66] == 'O'
    assert conll[67] == 'B-Therapeutic'
    assert conll[68] == 'I-Therapeutic'
    assert conll[69] == 'I-Therapeutic'
    assert conll[70] == 'I-Therapeutic'
    assert conll[71] == 'I-Therapeutic'
    assert conll[72] == 'I-Therapeutic'
    assert conll[73] == 'O'
    assert conll[74] == 'O'

#Text=eine Chemotherapie mit drei Zyklen PEB (Cispatin, Etoposid, Bleomycin) oder vier Zyklen PE (Ciplatin, Etoposid).

def test_unclosable_gap_value_short():
    webanno_df, _ = read_webanno([base_path / 'test_unclosable_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Procedure'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'B-Procedure'
    assert conll[6]  == 'O'
    assert conll[7]  == 'B-Substance'
    assert conll[8]  == 'O'
    assert conll[9]  == 'B-Substance'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Substance'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'B-Procedure'
    assert conll[17] == 'O'
    assert conll[18] == 'B-Substance'
    assert conll[19] == 'O'
    assert conll[20] == 'B-Substance'
    assert conll[21] == 'O'
    assert conll[22] == 'O'

def test_unclosable_gap_value_long():
    webanno_df, _ = read_webanno([base_path / 'test_unclosable_gap.tsv'])   
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=True).output
    #print(conll)
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Procedure'
    assert conll[2]  == 'I-Procedure'
    assert conll[3]  == 'I-Procedure'
    assert conll[4]  == 'I-Procedure'
    assert conll[5]  == 'I-Procedure'
    assert conll[6]  == 'O'
    assert conll[7]  == 'B-Substance'
    assert conll[8]  == 'O'
    assert conll[9]  == 'B-Substance'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Substance'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'B-Procedure'
    assert conll[15] == 'I-Procedure'
    assert conll[16] == 'I-Procedure'
    assert conll[17] == 'O'
    assert conll[18] == 'B-Substance'
    assert conll[19] == 'O'
    assert conll[20] == 'B-Substance'
    assert conll[21] == 'O'
    assert conll[22] == 'O'

def test_unclosable_gap_detail_short():
    webanno_df, _ = read_webanno([base_path / 'test_unclosable_gap.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Therapeutic'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'B-Therapeutic'
    assert conll[6]  == 'O'
    assert conll[7]  == 'B-Clinical_Drug'
    assert conll[8]  == 'O'
    assert conll[9]  == 'B-Clinical_Drug'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Clinical_Drug'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'B-Therapeutic'
    assert conll[17] == 'O'
    assert conll[18] == 'B-Clinical_Drug'
    assert conll[19] == 'O'
    assert conll[20] == 'B-Clinical_Drug'
    assert conll[21] == 'O'
    assert conll[22] == 'O'

def test_unclosable_gap_detail_long():
    webanno_df, _ = read_webanno([base_path / 'test_unclosable_gap.tsv'])   
    conll = webanno_to_iob_df(webanno_df, level='detail', long_spans=True).output
    #print(conll)
    assert conll[0]  == 'O'
    assert conll[1]  == 'B-Therapeutic'
    assert conll[2]  == 'I-Therapeutic'
    assert conll[3]  == 'I-Therapeutic'
    assert conll[4]  == 'I-Therapeutic'
    assert conll[5]  == 'I-Therapeutic'
    assert conll[6]  == 'O'
    assert conll[7]  == 'B-Clinical_Drug'
    assert conll[8]  == 'O'
    assert conll[9]  == 'B-Clinical_Drug'
    assert conll[10] == 'O'
    assert conll[11] == 'B-Clinical_Drug'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'B-Therapeutic'
    assert conll[15] == 'I-Therapeutic'
    assert conll[16] == 'I-Therapeutic'
    assert conll[17] == 'O'
    assert conll[18] == 'B-Clinical_Drug'
    assert conll[19] == 'O'
    assert conll[20] == 'B-Clinical_Drug'
    assert conll[21] == 'O'
    assert conll[22] == 'O'

def test_empty_file():
    webanno_df, _ = read_webanno([base_path / 'test_empty_file.tsv'])
    conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output
    assert conll[0]  == 'O'
    assert conll[1]  == 'O'
    assert conll[2]  == 'O'
    assert conll[3]  == 'O'
    assert conll[4]  == 'O'
    assert conll[5]  == 'O'
    assert conll[6]  == 'O'
    assert conll[7]  == 'O'
    assert conll[8]  == 'O'
    assert conll[9]  == 'O'
    assert conll[10] == 'O'
    assert conll[11] == 'O'
    assert conll[12] == 'O'
    assert conll[13] == 'O'
    assert conll[14] == 'O'
    assert conll[15] == 'O'
    assert conll[16] == 'O'
    assert conll[17] == 'O'
    assert conll[18] == 'O'
    assert conll[19] == 'O'
    assert conll[20] == 'O'
    assert conll[21] == 'O'
    assert conll[22] == 'O'
    assert conll[23] == 'O'
    assert conll[24] == 'O'
    assert conll[25] == 'O'
    assert conll[26] == 'O'
    assert conll[27] == 'O'
    assert conll[28] == 'O'

def test_null():
    webanno_df, _ = read_webanno([base_path / 'test_null.tsv'])
    assert webanno_df.iloc[29]['token'] == 'null'


#   B-Procedure
#   B-Finding
#   B-Substance
#   B-Therapeutic
#   B-Diagnostic
#   B-Nutrient_or_Body_Substance
#   B-Diagnosis_or_Pathology
#   B-Other_Finding
#   B-Clinical_Drug


# Template

# def test_():
#     webanno_df, _ = read_webanno([base_path / 'template.tsv'])
#     conll = webanno_to_iob_df(webanno_df, level='value', long_spans=False).output
#     assert conll[0]  == 'O'
#     assert conll[1]  == 'O'
#     assert conll[2]  == 'O'
#     assert conll[3]  == 'O'
#     assert conll[4]  == 'O'
#     assert conll[5]  == 'O'
#     assert conll[6]  == 'O'
#     assert conll[7]  == 'O'
#     assert conll[8]  == 'O'
#     assert conll[9]  == 'O'
#     assert conll[10] == 'O'
#     assert conll[11] == 'O'
#     assert conll[12] == 'O'
#     assert conll[13] == 'O'
#     assert conll[14] == 'O'
#     assert conll[15] == 'O'
#     assert conll[16] == 'O'
#     assert conll[17] == 'O'
#     assert conll[18] == 'O'
#     assert conll[19] == 'O'
#     assert conll[20] == 'O'
#     assert conll[21] == 'O'
#     assert conll[22] == 'O'
#     assert conll[23] == 'O'
#     assert conll[24] == 'O'
#     assert conll[25] == 'O'
#     assert conll[26] == 'O'
#     assert conll[27] == 'O'
